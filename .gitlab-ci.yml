# SPDX-FileCopyrightText: 2023 DESY and the Constellation authors
# SPDX-License-Identifier: CC0-1.0

stages:
  - build
  - test
  - lint
  - format
  - docs
  - deploy

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        CCACHE_DISABLE: 1
    - if: $CI_COMMIT_TAG && $CI_PIPELINE_SOURCE == "push"
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"
      when: never
    - when: always

default:
  retry:
    max: 2
    when:
      - stuck_or_timeout_failure
      - runner_system_failure

variables:
  CCACHE_DIR: $CI_PROJECT_DIR/.cache/ccache
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip

# C++ templates

# Files that should trigger C++ jobs when changed
.cpp-rules-changes: &cpp-rules-changes
  changes:
    - .gitlab-ci.yml
    - meson.build
    - cxx/**/*
    - subprojects/**/*
    - .clang-tidy
    - gcovr.cfg
    - docs/Doxyfile

# In MRs only run if above mentioned files are changed, otherwise always
.cpp-rules: &cpp-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *cpp-rules-changes
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

.meson-wrap-cache: &meson-wrap-cache
  key: meson-wrap-cache
  paths:
    - subprojects/packagecache/
  policy: pull

.ccache: &ccache
  key: ccache-$CI_JOB_IMAGE
  paths:
    - $CCACHE_DIR/
  when: always

.cpp-hi-load: &cpp-hi-load
  variables:
    NINJA_OPTIONS: "-j8"
    KUBERNETES_CPU_REQUEST: "8"
    KUBERNETES_MEMORY_REQUEST: "16Gi"
    MESON_NUM_PROCESSES: "8"
  tags:
    - hi-load

.alma9-gcc14:
  image: gitlab.desy.de:5555/constellation/build-images/alma9-gcc14:latest
  before_script:
    - source /opt/rh/gcc-toolset-14/enable

.debian-clang:
  image: gitlab.desy.de:5555/constellation/build-images/debian-clang:latest

.debian-gcc:
  image: gitlab.desy.de:5555/constellation/build-images/debian-gcc:latest

.fedora-clang:
  image: gitlab.desy.de:5555/constellation/build-images/fedora-clang:latest

.fedora-mingw:
  image: gitlab.desy.de:5555/constellation/build-images/fedora-mingw:latest

.ubuntu-22.04:
  image: gitlab.desy.de:5555/constellation/build-images/ubuntu-22.04:latest

.ubuntu-24.04:
  image: gitlab.desy.de:5555/constellation/build-images/ubuntu-24.04:latest

# Python templates

# Files that should trigger Python jobs when changed
.python-rules-changes: &python-rules-changes
  changes:
    - .gitlab-ci.yml
    - meson.build
    - python/**/*
    - pyproject.toml

# In MRs only run if above mentioned files are changed, otherwise always
.python-rules: &python-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *python-rules-changes
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

.python-venv:
  cache:
    - key: pip-cache
      paths:
        - $PIP_CACHE_DIR/
  before_script:
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip setuptools
    - pip install meson-python meson ninja

.python-3.11:
  image: tollerort.desy.de/hub.docker.com/python:3.11

.python-3.12:
  image: tollerort.desy.de/hub.docker.com/python:3.12

.python-3.13:
  image: tollerort.desy.de/hub.docker.com/python:3.13

# Combined Python / C++ templates

# In MRs run only if either C++ or Python files are changed
.cpp-python-rules: &cpp-python-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *cpp-rules-changes
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *python-rules-changes
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

.fedora-sphinx:
  image: gitlab.desy.de:5555/constellation/build-images/fedora-sphinx:latest

# build stage

.build-cpp:
  stage: build
  cache:
    - *meson-wrap-cache
    - *ccache
  script:
    - meson setup build -Dcxx_tests=enabled $(scripts/meson_enable_all_components.sh) -Dbuildtype=${BUILD_TYPE} ${BUILD_OPTIONS} $(eval ${BUILD_SCRIPTS})
    - meson compile -C build ${NINJA_OPTIONS}
  artifacts:
    paths:
      - build
    expire_in: 24 hour
  <<: *cpp-rules

.build-py:
  stage: build
  script:
    - pip install --no-build-isolation -e .[dev]
    - python3 -m build
  <<: *python-rules

build:alma9-gcc14:
  extends:
    - .build-cpp
    - .cpp-hi-load
    - .alma9-gcc14
  variables:
    BUILD_TYPE: "release"
    BUILD_OPTIONS: "-Db_lto=true -Db_lto_mode=thin -Dbuild_gui=qt5"

build:debian-clang:
  extends:
    - .build-cpp
    - .cpp-hi-load
    - .debian-clang
  variables:
    BUILD_TYPE: "debug"
    BUILD_OPTIONS: "-Dcpp_std=c++23 -Db_sanitize=address -Db_lundef=false"

build:debian-clang-libcxx:
  extends:
    - .build-cpp
    - .cpp-hi-load
    - .debian-clang
  variables:
    BUILD_TYPE: "debugoptimized"
    BUILD_OPTIONS: "--wrap-mode=forcefallback -Db_sanitize=thread -Db_lundef=false -Dbuild_gui=none"
    CXXFLAGS: "-stdlib=libc++ -fexperimental-library"

build:debian-gcc:
  extends:
    - .build-cpp
    - .cpp-hi-load
    - .debian-gcc
  variables:
    BUILD_TYPE: "debug"
    BUILD_OPTIONS: "-Dcpp_std=c++23 -Db_coverage=true"
  <<: *cpp-python-rules # Run on both C++ and Python changes for correct coverage reporting

build:fedora-clang:
  extends:
    - .build-cpp
    - .cpp-hi-load
    - .fedora-clang
  variables:
    BUILD_TYPE: "debugoptimized"

build:fedora-mingw:
  extends:
    - .build-cpp
    - .cpp-hi-load
    - .fedora-mingw
  variables:
    BUILD_TYPE: "release"
    BUILD_OPTIONS: "--cross .cross/mingw-ucrt.ini -Dbuild_gui=none"

build:ubuntu-22.04:
  extends:
    - .build-cpp
    - .cpp-hi-load
    - .ubuntu-22.04
  cache:
    - <<: *meson-wrap-cache
      policy: pull-push
    - *ccache
  variables:
    BUILD_TYPE: "debugoptimized"
    BUILD_OPTIONS: "-Dbuild_gui=qt5"
    CXXFLAGS: "-Wno-deprecated-enum-enum-conversion"

build:ubuntu-24.04:
  extends:
    - .build-cpp
    - .cpp-hi-load
    - .ubuntu-24.04
  variables:
    BUILD_TYPE: "debugoptimized"

build:python-3.11:
  extends:
    - .build-py
    - .python-venv
    - .python-3.11
  artifacts:
    paths:
      - dist
    expire_in: 24 hour

build:python-3.12:
  extends:
    - .build-py
    - .python-venv
    - .python-3.12

build:python-3.13:
  extends:
    - .build-py
    - .python-venv
    - .python-3.13

# test stage

.test-cpp:
  stage: test
  script:
    - meson test -C build --suite Constellation --no-rebuild --print-errorlogs
  artifacts:
    paths:
      - build/meson-logs/testlog.txt
    expire_in: 1 week
    when: on_failure
    reports:
      junit: build/meson-logs/testlog.junit.xml
  <<: *cpp-rules

.test-py:
  stage: test
  script:
    - pip install --no-build-isolation -e .[test,hdf5]
    - pytest --force-sugar --junitxml=junit.xml
  artifacts:
    expire_in: 1 week
    reports:
      junit: junit.xml
  <<: *python-rules

test:alma9-gcc14:
  extends:
    - .test-cpp
    - .alma9-gcc14
  needs:
    - job: build:alma9-gcc14
      artifacts: true

test:debian-clang:
  extends:
    - .test-cpp
    - .debian-clang
  needs:
    - job: build:debian-clang
      artifacts: true

test:debian-clang-libcxx:
  extends:
    - .test-cpp
    - .debian-clang
  needs:
    - job: build:debian-clang-libcxx
      artifacts: true

test:debian-gcc:
  extends:
    - .test-cpp
    - .debian-gcc
  needs:
    - job: build:debian-gcc
      artifacts: true
  artifacts:
    paths:
      - build
    expire_in: 24 hour
    when: always
  <<: *cpp-python-rules # Run on both C++ and Python changes for correct coverage reporting

test:fedora-clang:
  extends:
    - .test-cpp
    - .fedora-clang
  needs:
    - job: build:fedora-clang
      artifacts: true

test:ubuntu-22.04:
  extends:
    - .test-cpp
    - .ubuntu-22.04
  needs:
    - job: build:ubuntu-22.04
      artifacts: true

test:ubuntu-24.04:
  extends:
    - .test-cpp
    - .ubuntu-24.04
  needs:
    - job: build:ubuntu-24.04
      artifacts: true

test:python-3.11:
  extends:
    - .test-py
    - .python-venv
    - .python-3.11
  needs:
    - job: build:python-3.11
      artifacts: false

test:python-3.12:
  extends:
    - .test-py
    - .python-venv
    - .python-3.12
  needs:
    - job: build:python-3.12
      artifacts: false

test:python-3.13:
  extends:
    - .test-py
    - .python-venv
    - .python-3.13
  needs:
    - job: build:python-3.13
      artifacts: false

# lint stage

.lint:
  stage: lint
  needs: []

lint:coverage-py:
  extends:
    - .lint
    - .python-venv
    - .python-3.11
  needs:
    - job: test:python-3.11
      artifacts: false
      optional: true
  script:
    - pip install --no-build-isolation -e .[test,hdf5]
    - pytest --force-sugar --cov --cov-report term --cov-report xml:coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    expire_in: 1 week
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  <<: *cpp-python-rules # Run on both C++ and Python changes for correct coverage reporting

lint:coverage-cpp:
  extends:
    - .lint
    - .debian-gcc
  needs:
    - job: test:debian-gcc
      artifacts: true
  script:
    - ninja -C build coverage-xml
  coverage: '/^\s*lines:\s*\d+.\d+\%/'
  artifacts:
    expire_in: 1 week
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/meson-logs/coverage.xml
  <<: *cpp-python-rules # Run on both C++ and Python changes for correct coverage reporting

lint:mypy:
  extends:
    - .lint
    - .python-venv
    - .python-3.11
  script:
    - pip install --no-build-isolation -e .[dev,hdf5,cli]
    - mypy

lint:clang-tidy:
  extends:
    - .lint
    - .debian-clang
    - .cpp-hi-load
  needs:
    - job: build:debian-clang
      artifacts: true
  script:
    - ninja -C build clang-tidy
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

lint:clang-tidy-diff:
  extends:
    - .lint
    - .debian-clang
    - .cpp-hi-load
  needs:
    - job: build:debian-clang
      artifacts: true
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff -U0 origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME -- | clang-tidy-diff -p 1 -path build -j $MESON_NUM_PROCESSES
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      <<: *cpp-rules-changes

lint:clang-scan-build:
  extends:
    - .lint
    - .debian-clang
  needs:
    - job: build:debian-clang
      artifacts: false
  variables:
    CCC_CC: clang
    CCC_CXX: clang++
  script:
    - meson setup build -Dcxx_tests=disabled -Dbuildtype=debug $(scripts/meson_enable_all_components.sh)
    - ninja -C build scan-build
    - if [ ! -z "$(ls -A build/meson-logs/scanbuild)" ]; then false; fi
  artifacts:
    paths:
      - build/meson-logs/scanbuild
    expire_in: 1 week
    when: on_failure
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule"

lint:coverity-scan:
  extends:
    - .lint
    - .ubuntu-24.04
  needs:
    - job: build:ubuntu-24.04
      artifacts: false
  script:
    - curl -s https://scan.coverity.com/download/linux64 -o /tmp/cov-analysis-linux64.tgz
      --form project=$COVERITY_SCAN_PROJECT_NAME --form token=$COVERITY_SCAN_TOKEN
    - tar -xzf /tmp/cov-analysis-linux64.tgz
    - rm -r /tmp/cov-analysis-linux64.tgz
    - PATH=$PATH:$(echo cov-analysis-linux64-*/bin)
    - CC=gcc; CXX=g++ # Set directly to avoid ccache
    - cov-configure --gcc
    - meson setup build -Dcxx_tests=disabled -Dbuildtype=debug
    - cov-build --dir cov-int ninja -C build ${NINJA_OPTIONS}
    - tar -czf cov-int.tgz cov-int
    - curl -s https://scan.coverity.com/builds?project=$COVERITY_SCAN_PROJECT_NAME
      --form token=$COVERITY_SCAN_TOKEN --form email=$GITLAB_USER_EMAIL
      --form file=@cov-int.tgz --form version="$CI_COMMIT_REF_NAME"
      --form description="$CI_COMMIT_REF_NAME / $CI_COMMIT_SHA / $CI_PIPELINE_ID"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule"
  <<: *cpp-hi-load

# format stage

.format:
  stage: format
  needs: []

format:black:
  extends:
    - .format
    - .python-venv
    - .python-3.11
  script:
    - pip install --no-build-isolation -e .[dev]
    - black --check python/

format:isort:
  extends:
    - .format
    - .python-venv
    - .python-3.11
  script:
    - pip install --no-build-isolation -e .[dev]
    - isort --check .

format:flake8:
  extends:
    - .format
    - .python-venv
    - .python-3.11
  script:
    - pip install --no-build-isolation -e .[dev]
    - flake8 python/

format:clang-format:
  extends:
    - .format
    - .debian-clang
  script:
    - meson setup build -Dcxx_tests=enabled $(scripts/meson_enable_all_satellites.sh)
    - ninja -C build clang-format-check

format:reuse:
  extends: .format
  image: tollerort.desy.de/hub.docker.com/fsfe/reuse:latest
  script:
    - reuse lint

format:codespell:
  extends:
    - .format
    - .debian-gcc
  script:
    - codespell

# docs stage

.docs:
  stage: docs
  needs: []

docs:doxygen:
  extends:
    - .docs
    - .fedora-sphinx
  script:
    - make -C docs doxygen
  artifacts:
    paths:
      - docs/doxygen
    expire_in: 24 hour

docs:html:
  extends:
    - .docs
    - .python-venv
    - .fedora-sphinx
  variables:
    SPHINXOPTS: -W --keep-going
  needs:
    - job: docs:doxygen
      artifacts: true
  script:
    - pip install --no-build-isolation -e .[docs]
    - make -C docs html
    - mv docs/build/html html
    - echo "{\"HTML\":[{\"external_link\":{\"label\":\"Website Preview\",\"url\":\"https://constellation.pages.desy.de/-/constellation/-/jobs/$CI_JOB_ID/artifacts/html/index.html\"}}]}" > website_preview.json
  artifacts:
    paths:
      - html
    expire_in: 1 week
    reports:
      annotations: "website_preview.json"

docs:pdf:
  extends:
    - .docs
    - .python-venv
    - .fedora-sphinx
  variables:
    SPHINXOPTS: -W --keep-going
  needs:
    - job: docs:doxygen
      artifacts: true
  script:
    - pip install --no-build-isolation -e .[docs]
    - make -C docs latexpdf
    - mkdir pdf && mv docs/build/latex/*.pdf pdf
    - echo "{\"PDF\":[{\"external_link\":{\"label\":\"Operator Guide\",\"url\":\"https://constellation.pages.desy.de/-/constellation/-/jobs/$CI_JOB_ID/artifacts/pdf/operator_guide.pdf\"}},{\"external_link\":{\"label\":\"Application Developer Guide\",\"url\":\"https://constellation.pages.desy.de/-/constellation/-/jobs/$CI_JOB_ID/artifacts/pdf/application_development_guide.pdf\"}},{\"external_link\":{\"label\":\"Framework Development Guide\",\"url\":\"https://constellation.pages.desy.de/-/constellation/-/jobs/$CI_JOB_ID/artifacts/pdf/framework_development_guide.pdf\"}}]}" > pdf_documentation.json
  artifacts:
    paths:
      - pdf
    expire_in: 1 week
    reports:
      annotations: "pdf_documentation.json"

docs:spelling:
  extends:
    - .docs
    - .python-venv
    - .fedora-sphinx
  variables:
    SPHINXOPTS: -W --keep-going
  needs:
    - job: docs:doxygen
      artifacts: true
  script:
    - pip install --no-build-isolation -e .[docs]
    - make -C docs spelling

# deploy stage

.deploy:
  stage: deploy
  needs: []

deploy:release:
  extends:
    - .deploy
  image: tollerort.desy.de/hub.docker.com/alpine:latest
  variables:
    GITLAB_HOST: $CI_SERVER_URL
  script:
    - apk add git meson tar xz glab
    - scripts/create_source_dist.sh
    - CODENAME=$(grep version_code_name meson.build | sed -E "s%version_code_name = '([^']+)'%\1%")
    - glab auth login --job-token $CI_JOB_TOKEN --hostname $CI_SERVER_HOST --api-protocol $CI_SERVER_PROTOCOL
    - glab release create $CI_COMMIT_TAG "Constellation-${CI_COMMIT_TAG}.tar.xz#Full source code" --name "Constellation ${CI_COMMIT_TAG} - ${CODENAME}"
  artifacts:
    paths:
      - Constellation-*.tar.xz
    expire_in: 24 hour
  rules:
    - if: $CI_COMMIT_TAG =~ /^v.*/

deploy:zenodo:
  extends:
    - .deploy
  image: tollerort.desy.de/hub.docker.com/python:latest
  needs:
    - job: deploy:release
      artifacts: true
  script:
    - pip install git+https://gitlab.com/stephanlachnit/gitlab2zenodo.git@constellation
    - g2z-send -p -i $ZENODO_RECORD -t $ZENODO_TOKEN -v ${CI_COMMIT_TAG#v} Constellation-*.tar.xz
  rules:
    - if: $CI_COMMIT_TAG =~ /^v.*/

deploy:pypi:
  extends:
    - .deploy
    - .python-venv
    - .python-3.11
  needs:
    - job: build:python-3.11
      artifacts: true
  script:
    - pip install twine
    - twine upload dist/*
  rules:
    - if: $CI_COMMIT_TAG =~ /^v.*/

deploy:docs:
  extends:
    - .deploy
  needs:
    - job: docs:html
  trigger:
    project: constellation/constellation.pages.desy.de
  rules:
    - if: $CI_COMMIT_TAG =~ /^v.*/
